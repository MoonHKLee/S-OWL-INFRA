# This file was generated with lono. Do not edit directly, the changes will be lost.
# More info: http://lono.cloud
---
AWSTemplateFormatVersion: 2010-09-09
Description: S-OWL's ecs spot cluster.
Metadata:
  Authors:
    Description: tpdns90321(Orginal. Tung Nguyen (tung@boltops.com))
  License: MIT
Parameters:
  EcsCluster:
    Type: String
    Description: ECS Cluster
    Default: SOWL
  BurstCapacity:
    Type: String
    Description: BurstType Instance Capacity
    Default: '2'
  ComputeCapacity:
    Type: String
    Description: ComputeType Instance capacity
    Default: '1'
  TagName:
    Type: String
    Description: TagName
    Default: "S-OWL"
  VpcName:
    Description: VPC name.
    Type: String
    ConstraintDescription: Must be a string.
    Default: "S-OWL ECS"
  SourceCidr:
    Default: 0.0.0.0/0
    Description: CIDR/IP range for instance ssh access - defaults to 0.0.0.0/0
    Type: String
Mappings:
  AmiMap:
    ap-northeast-2:
      Ami: ami-0accbb5aa909be7bf
Resources:
  ECS:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsCluster
  BurstSpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt IamFleetRole.Arn
        TargetCapacity: !Ref BurstCapacity
        AllocationStrategy: 'diversified'
        LaunchSpecifications:
  
        - EbsOptimized: 'false'
          InstanceType: t3a.small
          ImageId: !FindInMap
            - AmiMap
            - !Ref 'AWS::Region'
            - Ami
          SecurityGroups:
          - GroupId: !Ref InstanceSecurityGroup
          Monitoring:
            Enabled: true
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              
              set -eux
              mkdir -p /etc/ecs
              echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
              export PATH=/usr/local/bin:$PATH
              yum -y install jq
              easy_install pip
              pip install awscli
              aws configure set default.region ${AWS::Region}
              
              cat <<EOF > /etc/init/spot-instance-termination-handler.conf
              description "Start spot instance termination handler monitoring script"
              author "BoltOps"
              start on started ecs
              script
              echo \$\$ > /var/run/spot-instance-termination-handler.pid
              exec /usr/local/bin/spot-instance-termination-handler.sh
              end script
              pre-start script
              logger "[spot-instance-termination-handler.sh]: spot instance termination
              notice handler started"
              end script
              EOF
              
              cat <<EOF > /usr/local/bin/spot-instance-termination-handler.sh
              #!/bin/bash
              while sleep 5; do
              if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)]; then
              /bin/false
              else
              logger "[spot-instance-termination-handler.sh]: spot instance termination notice detected"
              STATUS=DRAINING
              ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr -d \")
              CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn | tr -d \")
              logger "[spot-instance-termination-handler.sh]: putting instance in state \$STATUS"
              
              /usr/local/bin/aws  ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances \$CONTAINER_INSTANCE --status \$STATUS
              
              logger "[spot-instance-termination-handler.sh]: putting myself to sleep..."
              sleep 120 # exit loop as instance expires in 120 secs after terminating notification
              fi
              done
              EOF
              
              chmod +x /usr/local/bin/spot-instance-termination-handler.sh

          IamInstanceProfile:
            Arn: !GetAtt IamInstanceProfile.Arn
          SubnetId: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
          TagSpecifications:
          - ResourceType: "instance"
            Tags:
            - Key: Name
              Value: !Ref TagName

  ComputeSpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt IamFleetRole.Arn
        TargetCapacity: !Ref ComputeCapacity
        AllocationStrategy: 'lowestPrice'
        LaunchSpecifications:
  
        - EbsOptimized: 'true'
          InstanceType: c4.large 
          ImageId: !FindInMap
            - AmiMap
            - !Ref 'AWS::Region'
            - Ami
          SecurityGroups:
          - GroupId: !Ref InstanceSecurityGroup
          Monitoring:
            Enabled: true
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              
              set -eux
              mkdir -p /etc/ecs
              echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
              export PATH=/usr/local/bin:$PATH
              yum -y install jq
              easy_install pip
              pip install awscli
              aws configure set default.region ${AWS::Region}
              
              cat <<EOF > /etc/init/spot-instance-termination-handler.conf
              description "Start spot instance termination handler monitoring script"
              author "BoltOps"
              start on started ecs
              script
              echo \$\$ > /var/run/spot-instance-termination-handler.pid
              exec /usr/local/bin/spot-instance-termination-handler.sh
              end script
              pre-start script
              logger "[spot-instance-termination-handler.sh]: spot instance termination
              notice handler started"
              end script
              EOF
              
              cat <<EOF > /usr/local/bin/spot-instance-termination-handler.sh
              #!/bin/bash
              while sleep 5; do
              if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)]; then
              /bin/false
              else
              logger "[spot-instance-termination-handler.sh]: spot instance termination notice detected"
              STATUS=DRAINING
              ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr -d \")
              CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn | tr -d \")
              logger "[spot-instance-termination-handler.sh]: putting instance in state \$STATUS"
              
              /usr/local/bin/aws  ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances \$CONTAINER_INSTANCE --status \$STATUS
              
              logger "[spot-instance-termination-handler.sh]: putting myself to sleep..."
              sleep 120 # exit loop as instance expires in 120 secs after terminating notification
              fi
              done
              EOF
              
              chmod +x /usr/local/bin/spot-instance-termination-handler.sh

          IamInstanceProfile:
            Arn: !GetAtt IamInstanceProfile.Arn
          SubnetId: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
          TagSpecifications:
          - ResourceType: "instance"
            Tags:
            - Key: Name
              Value: !Ref TagName

        - EbsOptimized: 'true'
          InstanceType: m4.large 
          ImageId: !FindInMap
            - AmiMap
            - !Ref 'AWS::Region'
            - Ami
          SecurityGroups:
          - GroupId: !Ref InstanceSecurityGroup
          Monitoring:
            Enabled: true
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              
              set -eux
              mkdir -p /etc/ecs
              echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
              export PATH=/usr/local/bin:$PATH
              yum -y install jq
              easy_install pip
              pip install awscli
              aws configure set default.region ${AWS::Region}
              
              cat <<EOF > /etc/init/spot-instance-termination-handler.conf
              description "Start spot instance termination handler monitoring script"
              author "BoltOps"
              start on started ecs
              script
              echo \$\$ > /var/run/spot-instance-termination-handler.pid
              exec /usr/local/bin/spot-instance-termination-handler.sh
              end script
              pre-start script
              logger "[spot-instance-termination-handler.sh]: spot instance termination
              notice handler started"
              end script
              EOF
              
              cat <<EOF > /usr/local/bin/spot-instance-termination-handler.sh
              #!/bin/bash
              while sleep 5; do
              if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)]; then
              /bin/false
              else
              logger "[spot-instance-termination-handler.sh]: spot instance termination notice detected"
              STATUS=DRAINING
              ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr -d \")
              CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn | tr -d \")
              logger "[spot-instance-termination-handler.sh]: putting instance in state \$STATUS"
              
              /usr/local/bin/aws  ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances \$CONTAINER_INSTANCE --status \$STATUS
              
              logger "[spot-instance-termination-handler.sh]: putting myself to sleep..."
              sleep 120 # exit loop as instance expires in 120 secs after terminating notification
              fi
              done
              EOF
              
              chmod +x /usr/local/bin/spot-instance-termination-handler.sh

          IamInstanceProfile:
            Arn: !GetAtt IamInstanceProfile.Arn
          SubnetId: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
          TagSpecifications:
          - ResourceType: "instance"
            Tags:
            - Key: Name
              Value: !Ref TagName

        - EbsOptimized: 'true'
          InstanceType: c5.large 
          ImageId: !FindInMap
            - AmiMap
            - !Ref 'AWS::Region'
            - Ami
          SecurityGroups:
          - GroupId: !Ref InstanceSecurityGroup
          Monitoring:
            Enabled: true
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              
              set -eux
              mkdir -p /etc/ecs
              echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
              export PATH=/usr/local/bin:$PATH
              yum -y install jq
              easy_install pip
              pip install awscli
              aws configure set default.region ${AWS::Region}
              
              cat <<EOF > /etc/init/spot-instance-termination-handler.conf
              description "Start spot instance termination handler monitoring script"
              author "BoltOps"
              start on started ecs
              script
              echo \$\$ > /var/run/spot-instance-termination-handler.pid
              exec /usr/local/bin/spot-instance-termination-handler.sh
              end script
              pre-start script
              logger "[spot-instance-termination-handler.sh]: spot instance termination
              notice handler started"
              end script
              EOF
              
              cat <<EOF > /usr/local/bin/spot-instance-termination-handler.sh
              #!/bin/bash
              while sleep 5; do
              if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)]; then
              /bin/false
              else
              logger "[spot-instance-termination-handler.sh]: spot instance termination notice detected"
              STATUS=DRAINING
              ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr -d \")
              CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn | tr -d \")
              logger "[spot-instance-termination-handler.sh]: putting instance in state \$STATUS"
              
              /usr/local/bin/aws  ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances \$CONTAINER_INSTANCE --status \$STATUS
              
              logger "[spot-instance-termination-handler.sh]: putting myself to sleep..."
              sleep 120 # exit loop as instance expires in 120 secs after terminating notification
              fi
              done
              EOF
              
              chmod +x /usr/local/bin/spot-instance-termination-handler.sh

          IamInstanceProfile:
            Arn: !GetAtt IamInstanceProfile.Arn
          SubnetId: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
          TagSpecifications:
          - ResourceType: "instance"
            Tags:
            - Key: Name
              Value: !Ref TagName

        - EbsOptimized: 'true'
          InstanceType: m5.large 
          ImageId: !FindInMap
            - AmiMap
            - !Ref 'AWS::Region'
            - Ami
          SecurityGroups:
          - GroupId: !Ref InstanceSecurityGroup
          Monitoring:
            Enabled: true
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              
              set -eux
              mkdir -p /etc/ecs
              echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
              export PATH=/usr/local/bin:$PATH
              yum -y install jq
              easy_install pip
              pip install awscli
              aws configure set default.region ${AWS::Region}
              
              cat <<EOF > /etc/init/spot-instance-termination-handler.conf
              description "Start spot instance termination handler monitoring script"
              author "BoltOps"
              start on started ecs
              script
              echo \$\$ > /var/run/spot-instance-termination-handler.pid
              exec /usr/local/bin/spot-instance-termination-handler.sh
              end script
              pre-start script
              logger "[spot-instance-termination-handler.sh]: spot instance termination
              notice handler started"
              end script
              EOF
              
              cat <<EOF > /usr/local/bin/spot-instance-termination-handler.sh
              #!/bin/bash
              while sleep 5; do
              if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)]; then
              /bin/false
              else
              logger "[spot-instance-termination-handler.sh]: spot instance termination notice detected"
              STATUS=DRAINING
              ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr -d \")
              CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn | tr -d \")
              logger "[spot-instance-termination-handler.sh]: putting instance in state \$STATUS"
              
              /usr/local/bin/aws  ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances \$CONTAINER_INSTANCE --status \$STATUS
              
              logger "[spot-instance-termination-handler.sh]: putting myself to sleep..."
              sleep 120 # exit loop as instance expires in 120 secs after terminating notification
              fi
              done
              EOF
              
              chmod +x /usr/local/bin/spot-instance-termination-handler.sh

          IamInstanceProfile:
            Arn: !GetAtt IamInstanceProfile.Arn
          SubnetId: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
          TagSpecifications:
          - ResourceType: "instance"
            Tags:
            - Key: Name
              Value: !Ref TagName

## VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.30.0.0/16
      EnableDnsSupport: 'True'
      EnableDnsHostnames: 'True'
      Tags:
      - Key: Name
        Value: !Ref VpcName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref VpcName
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: RouteTablePublic
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  LoadBalancerSecurityGroup:
    Properties:
      GroupDescription: target load balancer
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - CidrIp: !Ref SourceCidr
        IpProtocol: tcp
        FromPort: 443 
        ToPort: 443
    Type: AWS::EC2::SecurityGroup
  InstanceSecurityGroup:
    Properties:
      GroupDescription: Spot fleet instance Security Group
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        IpProtocol: tcp
        FromPort: 0 
        ToPort: 65535
      - CidrIp: '10.30.0.0/16'
        IpProtocol: tcp
        FromPort: 0 
        ToPort: 65535
      VpcId: !Ref Vpc
    Type: AWS::EC2::SecurityGroup

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.30.0.0/19
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: vpc_name
        Value: !Ref VpcName
      - Key: Name
        Value: PublicSubnet1
  RouteTableAssociationPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTablePublic

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.30.32.0/19
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: vpc_name
        Value: !Ref VpcName
      - Key: Name
        Value: PublicSubnet2
  RouteTableAssociationPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTablePublic

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.30.64.0/19
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: vpc_name
        Value: !Ref VpcName
      - Key: Name
        Value: PublicSubnet3
  RouteTableAssociationPublicSubnet3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref RouteTablePublic

## IAM Roles
  IamFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
      Path: /
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn:
    - IamInstanceRole
    Properties:
      Path: /
      Roles:
      - Ref: IamInstanceRole
  IamInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

Outputs:
  Vpc:
    Description: The ID of the VPC
    Value: !Ref Vpc
